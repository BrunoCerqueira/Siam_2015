/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package example.topic;

import java.math.BigDecimal;
import java.util.Random;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.jms.Topic;
import javax.jms.TopicConnection;
import javax.jms.TopicSession;
import javax.jms.TopicSubscriber;

import org.apache.activemq.ActiveMQConnectionFactory;

import example.util.Util;

/**
 * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
 */
public class Publisher {
	private static final String BROKER_HOST = "tcp://localhost:%d";
	private static final int BROKER_PORT = Util.getBrokerPort();
	private static final String BROKER_URL = String.format(BROKER_HOST,
			BROKER_PORT);
	private static final Boolean NON_TRANSACTED = false;
	private static final int NUM_MESSAGES_TO_SEND = 100;
	private static final long DELAY = 1000;
	static SwingBasic swingBasic = new SwingBasic();

	public static Operacao gerarOperacao() {
		Operacao op = new Operacao();
		op.setDescricao(EnumEmpresa.values()[new Random().nextInt(3)]
				.getDescricao());
		op.setQuantidadeLotes((long) new Random().nextInt(5));
		op.setTipoOperacao(EnumTipoOperacao.values()[new Random().nextInt(2)]);
		op.setValorLote(new BigDecimal(new Random().nextInt(130)));
		return op;
	}

	public static void main(String[] args) {

		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
				"admin", "password", BROKER_URL);
		Connection connection = null;

		try {

			connection = connectionFactory.createConnection();
			connection.start();

			Session session = connection.createSession(NON_TRANSACTED,
					Session.AUTO_ACKNOWLEDGE);

			Destination destination;
			MessageProducer producer = null;
			for (int i = 0; i < NUM_MESSAGES_TO_SEND; i++) {

				System.out.println("Sending message #" + i);

				Operacao op = gerarOperacao();
//				destination = session.createTopic(op.getDescricao());
//				producer = session.createProducer(destination);
				producer.setDeliveryMode(DeliveryMode.PERSISTENT);
				ObjectMessage message = session.createObjectMessage(op);
		           
		             destination = session.createTopic(op.getDescricao());
		            
		                                       
		            TopicConnection conn = connectionFactory.createTopicConnection();
					conn.setClientID("myClientID");
					TopicSession sess = conn.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
					TopicSubscriber sub = sess.createDurableSubscriber((Topic) conn,"Microsoft");
					conn.start();
				swingBasic.start(op);

				producer.send(message);
				Thread.sleep(DELAY);
			}

			// tell the subscribers we're done
			producer.send(session.createTextMessage("END"));

			producer.close();
			session.close();

		} catch (Exception e) {
			System.out.println("Caught exception!");
		} finally {
			if (connection != null) {
				try {
					connection.close();
				} catch (JMSException e) {
					System.out.println("Could not close an open connection...");
				}
			}
		}
	}
}
