package example.topic;
import java.awt.GridLayout;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JTable;

public class SwingBasic extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2603040007677913811L;
	JPanel row = new JPanel();
	JTable table = new JTable();
	GridLayout experimentLayout = new GridLayout(0,1);
	public void start(Operacao operacao) {
		String[] columnNames = {"First Name",
                "Last Name",
                "Sport",
                "# of Years",
                "Vegetarian"};

		JLabel l = new JLabel();
		l.setText("Descrição: "+operacao.getDescricao()+"|"+"valor: "+operacao.getValorLote()+"|"+"lotes: "+operacao.getQuantidadeLotes()+"| Tipo Operação: "+operacao.getTipoOperacao().getDescricao());
		row.add(l);
		row.setFocusable(Boolean.FALSE);
		row.setVerifyInputWhenFocusTarget(Boolean.FALSE);
		
		row.setLayout(experimentLayout);
		
		add(row);
		
			setSize(800, 800);
			Object[][] data = {
				    {"Kathy", "Smith",
				     "Snowboarding", new Integer(5), new Boolean(false)}};

			table.setValueAt(data, 1, 1);
		add(table);	
		setVisible(true);
		
	}
	@Override
	public void setVisible(final boolean visible) {
	  // make sure that frame is marked as not disposed if it is asked to be visible
	  if (visible) {
	     
	  }
	  // let's handle visibility...
	  if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible
	      super.setVisible(visible);
	  }
	  // ...and bring frame to the front.. in a strange and weird way
	  if (visible) {
	      int state = super.getExtendedState();
	      state &= ~JFrame.ICONIFIED;
	      super.setExtendedState(state);
	      super.setAlwaysOnTop(false);
	
	  }
	}

	
}
