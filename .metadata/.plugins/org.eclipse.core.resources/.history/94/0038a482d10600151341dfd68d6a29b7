/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package example.topic;

import java.awt.Label;
import java.util.Random;
import java.util.Scanner;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.swing.JLabel;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

import example.util.Util;

/**
 * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
 */
public class Publisher {
    private static final String BROKER_HOST = "tcp://localhost:%d";
    private static final int BROKER_PORT = Util.getBrokerPort();
    private static final String BROKER_URL = String.format(BROKER_HOST, BROKER_PORT);
    private static final Boolean NON_TRANSACTED = false;
    private static final int NUM_MESSAGES_TO_SEND = 100;
    private static final long DELAY = 1000;

   
    public static void main(String[] args) {
    	
    	

        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "password", BROKER_URL);
        ((ActiveMQConnectionFactory)connectionFactory).setAlwaysSessionAsync(true);
        Connection connection = null;
        SwingBasic swingBasic = new SwingBasic();
        swingBasic.start();
        try {
        	 connection = connectionFactory.createTopicConnection();
             ((ActiveMQConnection)connection).setAlwaysSessionAsync(true);
             ((ActiveMQConnection)connection).setUseRetroactiveConsumer(true);
             connection.start();
        	while(true){
           
        		
            Session session = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
            Destination destination = session.createTopic(EnumEmpresa.values()[(new Random().nextInt(3))].getDescricao());
            MessageProducer producer = session.createProducer(destination);
            producer.setDeliveryMode(DeliveryMode.PERSISTENT);
            
           
                TextMessage message = session.createTextMessage("Message #" );
                System.out.println("Sending message #");
                producer.send(message);
                JLabel l = new JLabel();
        		l.setText("Anurag jain(csanuragjain)");
        		swingBasic.add(l);
        		swingBasic.setSize(400, 400);
        		swingBasic.setVisible(true);
                Thread.sleep(DELAY);
               
            }
         

          
 
        } catch (Exception e) {
            System.out.println("Caught exception!");
        }
        finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (JMSException e) {
                    System.out.println("Could not close an open connection...");
                }
            }
        }
    }
}
